// Code generated by goyacc -o y.go new_parser.y. DO NOT EDIT.

//line new_parser.y:3
// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package query

import __yyfmt__ "fmt"

//line new_parser.y:17

import (
	"fmt"
	"net"
	"strconv"
	"strings"
	"time"
	"unicode"
)

//line new_parser.y:30
type yySymType struct {
	yys   int
	num   int
	ip    net.IP
	str   string
	query Query
	dur   time.Duration
	time  time.Time
	mac   net.HardwareAddr
}

const HOST = 57346
const PORT = 57347
const PROTO = 57348
const AND = 57349
const OR = 57350
const NET = 57351
const MASK = 57352
const TCP = 57353
const UDP = 57354
const ICMP = 57355
const BEFORE = 57356
const AFTER = 57357
const IPP = 57358
const AGO = 57359
const VLAN = 57360
const MPLS = 57361
const MAC = 57362
const IP = 57363
const NUM = 57364
const DURATION = 57365
const TIME = 57366
const MACADDR = 57367

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"HOST",
	"PORT",
	"PROTO",
	"AND",
	"OR",
	"NET",
	"MASK",
	"TCP",
	"UDP",
	"ICMP",
	"BEFORE",
	"AFTER",
	"IPP",
	"AGO",
	"VLAN",
	"MPLS",
	"MAC",
	"IP",
	"NUM",
	"DURATION",
	"TIME",
	"MACADDR",
	"'/'",
	"'('",
	"')'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line new_parser.y:181

// macQuery represents a query for a specific MAC address.
// type macQuery net.HardwareAddr

// func (q macQuery) LookupIn(ctx context.Context, index *indexfile.IndexFile) (bp base.Positions, err error) {
// 	defer log(q, index, &bp, &err)()
// 	return index.MACPositions(ctx, net.HardwareAddr(q))
// }

// func (q macQuery) String() string { return fmt.Sprintf("mac %s", net.HardwareAddr(q).String()) }

// func (q macQuery) base() bool { return true }

// // macRangeQuery represents a query for a range of MAC addresses
// type macRangeQuery struct {
// 	from, to macQuery
// }

// func (q macRangeQuery) LookupIn(ctx context.Context, index *indexfile.IndexFile) (bp base.Positions, err error) {
// 	defer log(q, index, &bp, &err)()

// 	fromPos, err := q.from.LookupIn(ctx, index)
// 	if err != nil {
// 		return nil, err
// 	}

// 	toPos, err := q.to.LookupIn(ctx, index)
// 	if err != nil {
// 		return nil, err
// 	}

// 	return fromPos.Union(toPos), nil
// }

// func (q macRangeQuery) String() string {
// 	return fmt.Sprintf("mac %s mask %s", net.HardwareAddr(q.from).String(), net.HardwareAddr(q.to).String())
// }

// func (q macRangeQuery) base() bool { return true }

// macsFromMask calculates the range of MAC addresses given a MAC and its mask
func macsFromMask(mac, mask net.HardwareAddr) (from, to net.HardwareAddr, _ error) {
	if len(mac) != 6 || len(mask) != 6 {
		return nil, nil, fmt.Errorf("invalid MAC address or mask length")
	}

	from = make(net.HardwareAddr, 6)
	to = make(net.HardwareAddr, 6)

	for i := 0; i < 6; i++ {
		from[i] = mac[i] & mask[i]
		to[i] = mac[i] | ^mask[i]
	}

	return from, to, nil
}

func ipsFromNet(ip net.IP, mask net.IPMask) (from, to net.IP, _ error) {
	if len(ip) != len(mask) || (len(ip) != 4 && len(ip) != 16) {
		return nil, nil, fmt.Errorf("bad IP or mask: %v %v", ip, mask)
	}
	from = make(net.IP, len(ip))
	to = make(net.IP, len(ip))
	for i := 0; i < len(ip); i++ {
		from[i] = ip[i] & mask[i]
		to[i] = ip[i] | ^mask[i]
	}
	return
}

// Enhanced parserLex struct with MAC address support
type parserLex struct {
	now time.Time
	in  string
	pos int
	out Query
	err error
}

// Enhanced tokens map with MAC keyword
var tokens = map[string]int{
	"after":  AFTER,
	"ago":    AGO,
	"&&":     AND,
	"and":    AND,
	"before": BEFORE,
	"host":   HOST,
	"icmp":   ICMP,
	"ip":     IPP,
	"mask":   MASK,
	"mac":    MAC,
	"net":    NET,
	"||":     OR,
	"or":     OR,
	"port":   PORT,
	"vlan":   VLAN,
	"mpls":   MPLS,
	"proto":  PROTO,
	"tcp":    TCP,
	"udp":    UDP,
}

// parseMACAddress parses a MAC address string into net.HardwareAddr
func parseMACAddress(s string) (net.HardwareAddr, error) {
	// Replace hyphens with colons for consistent parsing
	s = strings.ReplaceAll(s, "-", ":")

	// Parse using net.ParseMAC which handles various formats
	mac, err := net.ParseMAC(s)
	if err != nil {
		return nil, fmt.Errorf("invalid MAC address format: %v", err)
	}

	// Ensure we have a 6-byte MAC address
	if len(mac) != 6 {
		return nil, fmt.Errorf("invalid MAC address length: got %d bytes, want 6", len(mac))
	}

	return mac, nil
}

// Enhanced Lex method with MAC address support
func (x *parserLex) Lex(yylval *yySymType) (ret int) {
	for x.pos < len(x.in) && unicode.IsSpace(rune(x.in[x.pos])) {
		x.pos++
	}
	for t, i := range tokens {
		if strings.HasPrefix(x.in[x.pos:], t) {
			x.pos += len(t)
			return i
		}
	}

	s := x.pos
	var isIP, isDuration, isTime, isMAC bool
L:
	for x.pos < len(x.in) {
		switch c := x.in[x.pos]; c {
		case ':':
			if x.pos-s == 2 {
				isMAC = true
			}
			isIP = !isMAC
			x.pos++
		case '-':
			if x.pos-s == 2 {
				isMAC = true
			}
			x.pos++
		case '.':
			isIP = true
			x.pos++
		case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'A', 'B', 'C', 'D', 'E', 'F':
			x.pos++
		case 'm', 'h':
			x.pos++
			isDuration = true
			break L
		case 'T', '+', 'Z':
			x.pos++
			isTime = true
		default:
			break L
		}
	}

	part := x.in[s:x.pos]
	switch {
	case isMAC:
		mac, err := parseMACAddress(part)
		if err != nil {
			x.Error(fmt.Sprintf("bad MAC address %q: %v", part, err))
			return -1
		}
		yylval.mac = mac
		return MACADDR
	case isTime:
		t, err := time.Parse(time.RFC3339, part)
		if err != nil {
			x.Error(fmt.Sprintf("bad time %q", part))
		}
		yylval.time = t
		return TIME
	case isIP:
		yylval.ip = net.ParseIP(part)
		if yylval.ip == nil {
			x.Error(fmt.Sprintf("bad IP %q", part))
			return -1
		}
		if ip4 := yylval.ip.To4(); ip4 != nil {
			yylval.ip = ip4
		}
		return IP
	case isDuration:
		duration, err := time.ParseDuration(part)
		if err != nil {
			x.Error(fmt.Sprintf("bad duration %q", part))
		}
		yylval.dur = duration
		return DURATION
	case x.pos != s:
		n, err := strconv.Atoi(part)
		if err != nil {
			return -1
		}
		yylval.num = n
		return NUM
	case x.pos >= len(x.in):
		return 0
	}
	switch c := x.in[x.pos]; c {
	case ':', '.', '(', ')', '/':
		x.pos++
		return int(c)
	}
	return -1
}

// Error is called by the parser on a parse error.
func (x *parserLex) Error(s string) {
	if x.err == nil {
		x.err = fmt.Errorf("%v at character %v (%q HERE %q)", s, x.pos, x.in[:x.pos], x.in[x.pos:])
	}
}

// parse parses an input string into a Query.
func parse(in string) (Query, error) {
	lex := &parserLex{in: in, now: time.Now()}
	parserParse(lex)
	if lex.err != nil {
		return nil, lex.err
	}
	return lex.out, nil
}

// This is how parserParse is implemented internally
func parserParse(lex *parserLex) {
    // Create a new parser instance
    parser := &yyParserImpl{}
    
    // Call the actual Parse method
    parser.Parse(lex)
}

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 50

var yyAct = [...]int8{
	4, 6, 20, 37, 21, 10, 41, 12, 13, 14,
	15, 16, 9, 35, 7, 8, 5, 17, 18, 36,
	30, 29, 24, 11, 23, 22, 42, 26, 19, 3,
	39, 2, 28, 34, 17, 18, 25, 40, 38, 1,
	0, 0, 0, 27, 0, 0, 0, 32, 33, 31,
}

var yyPact = [...]int16{
	-4, -1000, 27, -1000, 7, -21, 3, 2, 0, 30,
	6, -4, -1000, -1000, -1000, -3, -3, -4, -4, -1000,
	23, -1000, -1000, -1000, -1000, -9, -7, 10, -1000, -1000,
	13, -1000, -1000, -1000, -21, -1000, -16, 5, -1000, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]int8{
	0, 39, 31, 29, 32, 2,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 5,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 3, 2, 2, 4, 2, 2,
	2, 3, 4, 4, 3, 1, 1, 1, 2, 2,
	1, 2, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, 4, 20, 5, 18, 19, 16,
	9, 27, 11, 12, 13, 14, 15, 7, 8, 21,
	-5, 25, 22, 22, 22, 6, 21, -2, -4, 24,
	23, -4, -3, -3, 10, 22, 26, 10, 28, 17,
	-5, 22, 21,
}

var yyDef = [...]int8{
	0, -2, 1, 2, 0, 0, 0, 0, 0, 0,
	0, 0, 15, 16, 17, 0, 0, 0, 0, 5,
	6, 22, 8, 9, 10, 0, 0, 0, 18, 20,
	0, 19, 3, 4, 0, 11, 0, 0, 14, 21,
	7, 12, 13,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	27, 28, 3, 3, 3, 3, 3, 26,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
//func Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line new_parser.y:55
		{
			yylex.(*parserLex).out = yyDollar[1].query
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line new_parser.y:62
		{
			yyVAL.query = intersectQuery{yyDollar[1].query, yyDollar[3].query}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line new_parser.y:66
		{
			yyVAL.query = unionQuery{yyDollar[1].query, yyDollar[3].query}
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line new_parser.y:72
		{
			yyVAL.query = ipQuery{yyDollar[2].ip, yyDollar[2].ip}
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line new_parser.y:76
		{
			yyVAL.query = macQuery(yyDollar[2].mac)
		}
	case 7:
		yyDollar = yyS[yypt-4 : yypt+1]
//line new_parser.y:80
		{
			from, to, err := macsFromMask(yyDollar[2].mac, yyDollar[4].mac)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.query = macRangeQuery{from: macQuery(from), to: macQuery(to)}
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line new_parser.y:88
		{
			if yyDollar[2].num < 0 || yyDollar[2].num >= 65536 {
				yylex.Error(fmt.Sprintf("invalid port %v", yyDollar[2].num))
			}
			yyVAL.query = portQuery(yyDollar[2].num)
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line new_parser.y:95
		{
			if yyDollar[2].num < 0 || yyDollar[2].num >= 65536 {
				yylex.Error(fmt.Sprintf("invalid vlan %v", yyDollar[2].num))
			}
			yyVAL.query = vlanQuery(yyDollar[2].num)
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line new_parser.y:102
		{
			if yyDollar[2].num < 0 || yyDollar[2].num >= (1<<20) {
				yylex.Error(fmt.Sprintf("invalid mpls %v", yyDollar[2].num))
			}
			yyVAL.query = mplsQuery(yyDollar[2].num)
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line new_parser.y:109
		{
			if yyDollar[3].num < 0 || yyDollar[3].num >= 256 {
				yylex.Error(fmt.Sprintf("invalid proto %v", yyDollar[3].num))
			}
			yyVAL.query = protocolQuery(yyDollar[3].num)
		}
	case 12:
		yyDollar = yyS[yypt-4 : yypt+1]
//line new_parser.y:116
		{
			mask := net.CIDRMask(yyDollar[4].num, len(yyDollar[2].ip)*8)
			if mask == nil {
				yylex.Error(fmt.Sprintf("bad cidr: %v/%v", yyDollar[2].ip, yyDollar[4].num))
			}
			from, to, err := ipsFromNet(yyDollar[2].ip, mask)
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.query = ipQuery{from, to}
		}
	case 13:
		yyDollar = yyS[yypt-4 : yypt+1]
//line new_parser.y:128
		{
			from, to, err := ipsFromNet(yyDollar[2].ip, net.IPMask(yyDollar[4].ip))
			if err != nil {
				yylex.Error(err.Error())
			}
			yyVAL.query = ipQuery{from, to}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line new_parser.y:136
		{
			yyVAL.query = yyDollar[2].query
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line new_parser.y:140
		{
			yyVAL.query = protocolQuery(6)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line new_parser.y:144
		{
			yyVAL.query = protocolQuery(17)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line new_parser.y:148
		{
			yyVAL.query = protocolQuery(1)
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line new_parser.y:152
		{
			var t timeQuery
			t[1] = yyDollar[2].time
			yyVAL.query = t
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line new_parser.y:158
		{
			var t timeQuery
			t[0] = yyDollar[2].time
			yyVAL.query = t
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line new_parser.y:167
		{
			yyVAL.time = yyDollar[1].time
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line new_parser.y:171
		{
			yyVAL.time = yylex.(*parserLex).now.Add(-yyDollar[1].dur)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line new_parser.y:177
		{
			yyVAL.mac = yyDollar[1].mac
		}
	}
	goto yystack /* stack new state and value */
}
